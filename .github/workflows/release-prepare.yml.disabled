# ----------------------------------------------------------------------------------------------------------------------
# DISABLED UNTIL THERE IS A SOLUTION TO:
# https://github.com/orgs/community/discussions/25305
# ----------------------------------------------------------------------------------------------------------------------

# name: '➡️ Create Release'

# on:
#   workflow_dispatch:
#     inputs:
#       type:
#         description: How the version should be increased.
#         required: true
#         type: choice
#         default: 'patch'
#         options:
#           - major
#           - minor
#           - patch
#       prerelease:
#         description: The prerelease tag, if applicable.
#         required: false
#         type: string

# jobs:
#   # Phase 1: Bump Version
#   # Increase the version number.
#   bump-version:
#     name: 'Bump Version'
#     permissions:
#       contents: read
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.bump.outputs.version }}
#       prerelease: ${{ steps.bump.outputs.prerelease }}
#     steps:
#       - uses: actions/checkout@v3
#       - name: Download semver-tool
#         shell: bash
#         run: |
#           DEST="${{ runner.temp }}/semver-tool-bin"
#           mkdir -p "$DEST"
#           curl "https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver" -o "$DEST/semver-tool"
#           chmod +x "$DEST/semver-tool"
#           echo "$DEST" >> "$GITHUB_PATH"
#       - name: Bump Version
#         id: bump
#         shell: bash
#         run: |
#           CURRENT_VERSION="$(jq -r ".version" package.json)"
#           NEW_VERSION="$(semver-tool bump "${{ inputs.type }}" "$CURRENT_VERSION")"

#           # Append the prerelease, if there is one.
#           if [[ -n "${{ inputs.prerelease}}" ]]; then
#             printf "prerelease=true\n" >> "$GITHUB_OUTPUT"
#             if ! [[ "${{inputs.prerelease}}" =~ ^[a-z][a-z0-9-]* ]]; then
#               printf "::error::Invalid prerelease '%s'\n" "${{ inputs.prerelease }}"
#               exit 1
#             fi
#             NEW_VERSION="${NEW_VERSION}-${{ inputs.prerelease }}";
#           else
#             printf "prerelease=false\n" >> "$GITHUB_OUTPUT"
#           fi

#           # Write the version to an output.
#           printf "version=%s\n" "$NEW_VERSION" >> "$GITHUB_OUTPUT"
#       - name: Fetch tags
#         if: ${{ !env.ACT }}
#         shell: bash
#         run: git fetch --tags
#       - name: Check Version
#         shell: bash
#         run: |
#           if git rev-parse "v${{ steps.bump.outputs.version }}" -- &>/dev/null; then
#             printf "::error::Version '%s' already exists\n" "${{ steps.bump.outputs.version }}"
#             exit 1
#           fi

#   # Phase 2: Run Checks
#   # Ensure that all the checks pass.
#   run-checks:
#     needs: [bump-version]
#     name: 'Run Checks'
#     # uses: ./.github/workflows/commit-checks.yml
#     # permissions:
#     #   contents: read
#     runs-on: ubuntu-latest
#     steps:
#       - run: true

#   # Phase 3: Commit Version Bump
#   # Commit the change.
#   bump-version-commit:
#     name: 'Commit Bumped Version'
#     needs: [bump-version, run-checks]
#     permissions:
#       contents: write
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Change package version
#         shell: bash
#         run: |
#           jq --arg NEW_VERSION "${{ needs.bump-version.outputs.version }}" \
#             '.version = $NEW_VERSION' \
#             package.json > package.json.new
#           mv package.json.new package.json
#       - name: Recalculate package-lock
#         shell: bash
#         run: npm install --package-lock-only
#       - uses: EndBug/add-and-commit@v9
#         with:
#           add: package.json package-lock.json
#           default_author: github_actions
#           tag: 'v${{ needs.bump-version.outputs.version }}'
#           commit: "-n"
#           fetch: false
#           push: false
#           message: |
#             chore: bump version to ${{ needs.bump-version.outputs.version }}

#             This commit was generated by GitHub Actions.
#             [skip actions]
#       - shell: bash
#         run: git push --tags

#   # Phase 4: Create Release Draft
#   # The draft will be used for final review before releasing.
#   create-draft-release:
#     name: 'Create Draft Release'
#     runs-on: ubuntu-latest
#     needs: [bump-version, run-checks, bump-version-commit]
#     permissions:
#       contents: write
#     steps:
#       - name: Create Draft Release
#         id: create-release
#         uses: ncipollo/release-action@v1
#         with:
#           draft: true
#           tag: 'v${{ needs.bump-version.outputs.version }}'
#           generateReleaseNotes: true
#           prerelease: '${{ needs.bump-version.outputs.prerelease }}'
#       - name: Add Instructions
#         shell: bash
#         run: |
#           {
#             printf "# Next Steps\n"
#             printf 'A draft release for version `%s` was created [here](%s).\n' \
#               "${{ needs.bump-version.outputs.version }}" \
#               "$(sed 's#/releases/tag/#/releases/edit/#' <<< "${{ steps.create-release.outputs.html_url }}")"

#             printf "Create the release to publish the package to npm.\n"
#           } >> "$GITHUB_STEP_SUMMARY"
